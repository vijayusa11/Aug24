want to create export excel header as CustomFieldValue and column CustomFieldName as excel data of table CustomFieldMaster


here is table -
SELECT TOP (1000) [CustomFieldID]
      ,[CustomFieldName]
      ,[CustomFieldValue]
      ,[IsActive]
  FROM [CPSIntranet_Beta].[dbo].[CustomFieldMaster] 
 
here is method for to get dynamic data from stored procedure -
 
 public DataSet ExportDynamicReport(string EmployeeCode, string EmployeeName, string Designation, string Department, string Email, string Username, string employeeGroupName, string Status, string ComplianceStatus, string isDelete, string SelectedEmployeesIds, string orderby, string ordertype, string BankName, string BankAddress, string BankAccountName, string BankAccountNo, string BankAccShortCode, string SelectedFields)
 {
     DataSet ds = new DataSet();

     using (var connection = new SqlConnection(connectionStr))
     {
         connection.Open();

         string storedProc = "spGetEmployeeListWithBankExport";
         using (SqlCommand command = new SqlCommand(storedProc, connection))
         {
             command.CommandType = CommandType.StoredProcedure;

             // Add parameters to the command
             command.Parameters.AddWithValue("@OrderBy", orderby);
             command.Parameters.AddWithValue("@EmployeeCode", EmployeeCode);
             command.Parameters.AddWithValue("@EmployeeName", EmployeeName);
             command.Parameters.AddWithValue("@Designation", Designation);
             command.Parameters.AddWithValue("@DepartmentName", Department);
             command.Parameters.AddWithValue("@EmailAddress", Email);
             command.Parameters.AddWithValue("@Username", Username);
             command.Parameters.AddWithValue("@EmployeeGroupName", employeeGroupName);
             command.Parameters.AddWithValue("@Status", Status);
             command.Parameters.AddWithValue("@ComplianceStatus", ComplianceStatus);
             command.Parameters.AddWithValue("@IsDelete", 0);
             command.Parameters.AddWithValue("@employeeIds", SelectedEmployeesIds);
             command.Parameters.AddWithValue("@ViewerId", Common.Common.GetCurrentUserId());
             command.Parameters.AddWithValue("@ColumnNames", SelectedFields);
             command.Parameters.AddWithValue("@TotalCount", ParameterDirection.Output);

             using (SqlDataAdapter adapter = new SqlDataAdapter(command))
             {
                 adapter.Fill(ds);
             }

             // Check the output parameter for row count (optional, for debugging)
             int rowCount = (int)command.Parameters["@TotalCount"].Value;
         }
         connection.Close();
     }

     return ds;
 }
 
here is method for to create excel -
    BLEmployees objBL = new BLEmployees();

    orderby = orderby.Replace("EmployeeName", "FirstName");

    string strExportPath = Path.Combine(Server.MapPath("~/Uploaded/Temp/" + Common.GetCurrentUserId().ToString().Trim()), "ExportDynamicStaffDetails" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_" + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + ".xls");
    if (Directory.Exists(Server.MapPath("~/Uploaded/Temp/" + Common.GetCurrentUserId().ToString().Trim())) == false)
        Directory.CreateDirectory(Server.MapPath("~/Uploaded/Temp/" + Common.GetCurrentUserId().ToString().Trim()));

 //   var employeeList = objBL.GetEmployeeListWithBankExport(employeecode, employeename, designation, department, email, username, employeeGroupName, Status, ComplianceStatus, isdelete, SelectedEmployeesIds, orderby, ordertype, BankName, BankAddress, BankAccountName, BankAccountNo, BankAccShortCode, RegionId, CoverApproverGroupIds, Gender, Mobile, ContractorCode, Username1, NINumber, type, ReviewDate, LeavingDate, Address, HomeEmail, NonMedicalPescriber, ReportSystem, CheckedOn, HourPerWeek, HourPerDay, SmartcardNo, );
    var employeeList = objBL.ExportDynamicReport(employeecode, employeename, designation, department, email, username, employeeGroupName, Status, ComplianceStatus, isdelete, SelectedEmployeesIds, orderby, ordertype, BankName, BankAddress, BankAccountName, BankAccountNo, BankAccShortCode, SelectedFields);
    HSSFWorkbook workbook = new HSSFWorkbook();
    ISheet sheet = workbook.CreateSheet("Report");
    IRow headerRow = sheet.CreateRow(0);

    // Define the bold style for headers
    ICellStyle boldStyle = workbook.CreateCellStyle();
    IFont boldFont = workbook.CreateFont();
    boldFont.IsBold = true;
    boldStyle.SetFont(boldFont);

    // Assuming `SelectedFields` is a comma-separated string of column names
    string[] columns = SelectedFields.Split(',');

    // Create the header row dynamically based on `SelectedFields`
    for (int i = 0; i < columns.Length; i++)
    {
        ICell cell = headerRow.CreateCell(i);
        cell.SetCellValue(columns[i]);
        cell.CellStyle = boldStyle;
    }
                    int rowIndex = 1;
    if (employeeList != null && employeeList.Tables.Count > 0 && employeeList.Tables[0].Rows.Count > 0)
    {
        foreach (DataRow dataEntity in employeeList.Tables[0].Rows)
        {
            IRow currentRow = sheet.CreateRow(rowIndex);

            for (int i = 0; i < columns.Length; i++)
            {
                string columnName = columns[i].Trim();
                string cellValue = dataEntity[columnName] != DBNull.Value ? dataEntity[columnName].ToString() : string.Empty;
                currentRow.CreateCell(i).SetCellValue(cellValue);
            }

            rowIndex++;
        }
    }
    else
    {
        // Handle the case where no data is returned
        Console.WriteLine("No data found.");
    }

    // Write the workbook to a file
    using (var fileData = new FileStream(strExportPath, FileMode.Create, FileAccess.Write))
    {
        workbook.Write(fileData);
    }
   
    objBL.Dispose();
    objBL = null;

    return Json(new { status = "success", FileName = Path.GetFileName(strExportPath) }, JsonRequestBehavior.AllowGet);
	 

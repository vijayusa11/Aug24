using System;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static void Main(string[] args)
    {
        // Call the async method and wait for its completion
        Task.Run(() => FetchLargeApiResponseAsync()).Wait();
    }

    static async Task FetchLargeApiResponseAsync()
    {
        // Define the API URL
        string url = "https://api.example.com/large-data";

        // Create an HttpClientHandler to customize the buffer size
        HttpClientHandler handler = new HttpClientHandler
        {
            // Increase the maximum response content buffer size (default is 2GB)
            MaxResponseContentBufferSize = 1024 * 1024 * 100 // 100 MB buffer
        };

        // Create HttpClient with the custom handler
        using (HttpClient client = new HttpClient(handler))
        {
            // Set a higher timeout to handle large responses
            client.Timeout = TimeSpan.FromMinutes(10);

            try
            {
                // Make an asynchronous GET request to the API endpoint
                using (HttpResponseMessage response = await client.GetAsync(url, HttpCompletionOption.ResponseHeadersRead))
                {
                    // Ensure the request was successful
                    response.EnsureSuccessStatusCode();

                    // Read the response as a stream
                    using (Stream stream = await response.Content.ReadAsStreamAsync())
                    using (StreamReader reader = new StreamReader(stream))
                    {
                        // Read the response content in chunks to handle large data
                        char[] buffer = new char[8192];
                        int bytesRead;
                        while ((bytesRead = await reader.ReadAsync(buffer, 0, buffer.Length)) > 0)
                        {
                            // Process the chunk of data read
                            Console.WriteLine(new string(buffer, 0, bytesRead));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle any errors that might have occurred during the request
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }
}
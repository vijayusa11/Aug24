public DataSet ExportDynamicReport(string EmployeeCode, string EmployeeName, string Designation, string Department, string Email, string Username, string employeeGroupName, string Status, string ComplianceStatus, string isDelete, string SelectedEmployeesIds, string orderby, string ordertype, string BankName, string BankAddress, string BankAccountName, string BankAccountNo, string BankAccShortCode, string SelectedFields)
{
    DataSet ds = new DataSet();

    using (var connection = new SqlConnection("Database=CPSIntranet_Beta;Server=10.10.10.7;user=sa;password=9ijnhy6"))
    {
        connection.Open();

        string storedProc = "spGetEmployeeListWithBankExport";
        using (SqlCommand command = new SqlCommand(storedProc, connection))
        {
            command.CommandType = CommandType.StoredProcedure;

            // Add parameters to the command
            command.Parameters.Add(new SqlParameter("@OrderBy", orderby));
            command.Parameters.Add(new SqlParameter("@EmployeeCode", EmployeeCode));
            command.Parameters.Add(new SqlParameter("@EmployeeName", EmployeeName));
            command.Parameters.Add(new SqlParameter("@Designation", Designation));
            command.Parameters.Add(new SqlParameter("@DepartmentName", Department));
            command.Parameters.Add(new SqlParameter("@EmailAddress", Email));
            command.Parameters.Add(new SqlParameter("@Username", Username));
            command.Parameters.Add(new SqlParameter("@EmployeeGroupName", employeeGroupName));
            command.Parameters.Add(new SqlParameter("@Status", Status));
            command.Parameters.Add(new SqlParameter("@ComplianceStatus", ComplianceStatus));
            command.Parameters.Add(new SqlParameter("@IsDelete", isDelete ?? "false"));
            command.Parameters.Add(new SqlParameter("@employeeIds", SelectedEmployeesIds));
            command.Parameters.Add(new SqlParameter("@ViewerId", Common.Common.GetCurrentUserId()));
            command.Parameters.Add(new SqlParameter("@ColumnNames", SelectedFields));
            command.Parameters.Add(new SqlParameter("@TotalCount", false));

            // Use ExecuteReader to get multiple records
            using (SqlDataReader reader = command.ExecuteReader())
            {
                DataTable dt = new DataTable();
                dt.Load(reader);  // Load the data from the reader into the DataTable
                ds.Tables.Add(dt);  // Add the DataTable to the DataSet

                // Optionally, iterate over the reader to see what is being returned
                while (reader.Read())
                {
                    for (int i = 0; i < reader.FieldCount; i++)
                    {
                        Console.WriteLine($"{reader.GetName(i)}: {reader[i]}");
                    }
                }
            }
        }
        connection.Close();
    }

    return ds;
}